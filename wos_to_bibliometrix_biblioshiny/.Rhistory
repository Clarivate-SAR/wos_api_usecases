row <- org_df[org_df$pref == "Y", ]
print(row$content)
return(row$content[-1])
}
}
}
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[63]])
fetch_org_names <- function(x) {
org_df <- x$address_spec.organizations.organization[[1]]
if("Y" %in% org_df$pref) {
row <- org_df[org_df$pref == "Y", ]
return(row$content[-1])
} else {
org_df <- x$address_spec$organizations$organization
if("Y" %in% org_df$pref) {
row <- org_df[org_df$pref == "Y", ]
print(row$content[-1])
return(row$content[-1])
}
}
}
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[63]])
fetch_c1 <- function(x) {
if(is.data.frame(x)) {
c1 = list()
for(i in c(1:nrow(x))) {
org <- fetch_org_names(x[i,])
authors <- fetch_author_names_for_c1(x[i,])
c1[i] <- paste("[", authors, "] ", org, sep = "")
}
return(paste(c1, collapse = "; "))
} else {
print('Else!')
org <- fetch_org_names(x)
authors <- fetch_author_names_for_c1(x)
return(paste("[", authors, "] ", org, sep = ""))
}
}
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[63]])
fetch_author_names_for_c1 <- function(x) {
print(x)
if(is.data.frame(x)) {
return(paste(x[, "names.name.full_name"], collapse = "; "))
} else if(is.list(x)) {
return(x$names.name.full_name)
} else {
return("")
}
}
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[63]])
fetch_author_names_for_c1 <- function(x) {
if(is.data.frame(x)) {
print(
"IT IS@"
)
return(paste(x[, "names.name.full_name"], collapse = "; "))
} else if(is.list(x)) {
return(x$names.name.full_name)
} else {
return("")
}
}
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[63]])
fetch_author_names_for_c1 <- function(x) {
if(is.data.frame(x)) {
return(paste(x[, "names.name.full_name"], collapse = "; "))
} else if(is.list(x)) {
print('IT IS!')
return(x$names.name.full_name)
} else {
return("")
}
}
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[63]])
fetch_author_names_for_c1 <- function(x) {
if(is.data.frame(x)) {
return(paste(x[, "names.name.full_name"], collapse = "; "))
} else if(is.list(x)) {
return(x$names.name.full_name or x$names$name$full_name)
fetch_author_names_for_c1 <- function(x) {
if(is.data.frame(x)) {
return(paste(x[, "names.name.full_name"], collapse = "; "))
} else if(is.list(x)) {
if('names' %in% x) {
print("IT IS@")
} else {
return(x$names.name.full_name)
} else {
fetch_author_names_for_c1 <- function(x) {
if(is.data.frame(x)) {
return(paste(x[, "names.name.full_name"], collapse = "; "))
} else if(is.list(x)) {
if('names' %in% x) {
print("IT IS@")
} else {
return(x$names.name.full_name)
}
} else {
return("")
}
}
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[63]])
fetch_author_names_for_c1 <- function(x) {
if(is.data.frame(x)) {
return(paste(x[, "names.name.full_name"], collapse = "; "))
} else if(is.list(x)) {
print(x)
if('names' %in% x) {
print("IT IS@")
} else {
return(x$names.name.full_name)
}
} else {
return("")
}
}
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[63]])
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[63]])
fetch_author_names_for_c1 <- function(x) {
if(is.data.frame(x)) {
return(paste(x[, "names.name.full_name"], collapse = "; "))
} else if(is.list(x)) {
print(x)
print(x$names)
} else {
return(x$names.name.full_name)
}
} else {
fetch_author_names_for_c1 <- function(x) {
if(is.data.frame(x)) {
return(paste(x[, "names.name.full_name"], collapse = "; "))
} else if(is.list(x)) {
print(x)
print(x$names)
return(x$names.name.full_name)
}
} else {
fetch_author_names_for_c1 <- function(x) {
if(is.data.frame(x)) {
return(paste(x[, "names.name.full_name"], collapse = "; "))
} else if(is.list(x)) {
print(x)
print(x$names)
return(x$names.name.full_name)
} else {
return("")
}
}
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[63]])
fetch_author_names_for_c1 <- function(x) {
if(is.data.frame(x)) {
return(paste(x[, "names.name.full_name"], collapse = "; "))
} else if(is.list(x)) {
print(x$names)
return(x$names.name.full_name)
} else {
return("")
}
}
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[63]])
fetch_author_names_for_c1 <- function(x) {
if(is.data.frame(x)) {
return(paste(x[, "names.name.full_name"], collapse = "; "))
} else if(is.list(x)) {
return(x$names$name$full_name)
} else {
return("")
}
}
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[63]])
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[1]])
M$C1 <- sapply(
records$static_data.fullrecord_metadata.addresses.address_name,
fetch_c1
)
M$C1 <- sapply(
records$static_data.fullrecord_metadata.addresses.address_name,
fetch_c1
)
fetch_c1 <- function(x) {
print(x$UID)
if(is.data.frame(x)) {
c1 = list()
for(i in c(1:nrow(x))) {
org <- fetch_org_names(x[i,])
authors <- fetch_author_names_for_c1(x[i,])
c1[i] <- paste("[", authors, "] ", org, sep = "")
}
return(paste(c1, collapse = "; "))
} else {
org <- fetch_org_names(x)
authors <- fetch_author_names_for_c1(x)
return(paste("[", authors, "] ", org, sep = ""))
}
}
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[1]])
M$C1 <- sapply(
records$static_data.fullrecord_metadata.addresses.address_name,
fetch_c1
)
fetch_c1 <- function(x) {
print(x$UID)
x -< $static_data.fullrecord_metadata.addresses.address_name
if(is.data.frame(x)) {
c1 = list()
for(i in c(1:nrow(x))) {
org <- fetch_org_names(x[i,])
authors <- fetch_author_names_for_c1(x[i,])
c1[i] <- paste("[", authors, "] ", org, sep = "")
}
return(paste(c1, collapse = "; "))
} else {
org <- fetch_org_names(x)
authors <- fetch_author_names_for_c1(x)
return(paste("[", authors, "] ", org, sep = ""))
}
}
fetch_c1 <- function(x) {
print(x$UID)
x -< x$static_data.fullrecord_metadata.addresses.address_name
if(is.data.frame(x)) {
c1 = list()
for(i in c(1:nrow(x))) {
org <- fetch_org_names(x[i,])
authors <- fetch_author_names_for_c1(x[i,])
c1[i] <- paste("[", authors, "] ", org, sep = "")
}
return(paste(c1, collapse = "; "))
} else {
org <- fetch_org_names(x)
authors <- fetch_author_names_for_c1(x)
return(paste("[", authors, "] ", org, sep = ""))
}
}
Q
fetch_c1 <- function(x) {
print(x$UID)
x -< x$static_data.fullrecord_metadata.addresses.address_name
M$C1 <- sapply(
records,
fetch_c1
)
force(x)
fetch_c1 <- function(x) {
print(x["UID"])
x -< x$static_data.fullrecord_metadata.addresses.address_name
fetch_c1 <- function(x) {
print(x["UID"])
x <- x$static_data.fullrecord_metadata.addresses.address_name
if(is.data.frame(x)) {
c1 = list()
for(i in c(1:nrow(x))) {
org <- fetch_org_names(x[i,])
authors <- fetch_author_names_for_c1(x[i,])
c1[i] <- paste("[", authors, "] ", org, sep = "")
}
return(paste(c1, collapse = "; "))
} else {
org <- fetch_org_names(x)
authors <- fetch_author_names_for_c1(x)
return(paste("[", authors, "] ", org, sep = ""))
}
}
M$C1 <- sapply(
records,
fetch_c1
)
M$C1 <- sapply(records, fetch_c1)
fetch_c1 <- function(x) {
print(x$UID)
x <- x$static_data.fullrecord_metadata.addresses.address_name
if(is.data.frame(x)) {
c1 = list()
for(i in c(1:nrow(x))) {
org <- fetch_org_names(x[i,])
authors <- fetch_author_names_for_c1(x[i,])
c1[i] <- paste("[", authors, "] ", org, sep = "")
}
return(paste(c1, collapse = "; "))
} else {
org <- fetch_org_names(x)
authors <- fetch_author_names_for_c1(x)
return(paste("[", authors, "] ", org, sep = ""))
}
}
M$C1 <- sapply(records, fetch_c1)
}
M$C1 <- sapply(records$static_data.fullrecord_metadata.addresses.address_name, fetch_c1)
View(records)
View(records[[63]][[1]])
View(records[[63]][[2]])
View(records[[63]][[3]])
some_object <- records$static_data.fullrecord_metadata.addresses.address_name[[2]]
c1_test <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[2]])
c1_test <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[1]])
c1_test <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[1]])
c1_test <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[63]])
c1_test <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[1])
print(some_object)
some_object <- records$static_data.fullrecord_metadata.addresses.address_name[[1]]
print(some_object)
c1_test <- fetch_c1(some_object)
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[1]])
fetch_c1 <- function(x) {
if(is.data.frame(x)) {
c1 = list()
for(i in c(1:nrow(x))) {
org <- fetch_org_names(x[i,])
authors <- fetch_author_names_for_c1(x[i,])
c1[i] <- paste("[", authors, "] ", org, sep = "")
}
return(paste(c1, collapse = "; "))
} else {
org <- fetch_org_names(x)
authors <- fetch_author_names_for_c1(x)
return(paste("[", authors, "] ", org, sep = ""))
}
}
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[1]])
# Dumbest debugging area
test_value <- fetch_c1(records$static_data.fullrecord_metadata.addresses.address_name[[2]])
M$C1 <- sapply(records, fetch_c1)
fetch_c1 <- function(x) {
print(x)
if(is.data.frame(x)) {
c1 = list()
for(i in c(1:nrow(x))) {
org <- fetch_org_names(x[i,])
authors <- fetch_author_names_for_c1(x[i,])
c1[i] <- paste("[", authors, "] ", org, sep = "")
}
return(paste(c1, collapse = "; "))
} else {
org <- fetch_org_names(x)
authors <- fetch_author_names_for_c1(x)
return(paste("[", authors, "] ", org, sep = ""))
}
}
M$C1 <- sapply(records, fetch_c1)
# Dumbest debugging area
some_object <- records$static_data.fullrecord_metadata.addresses.address_name[[1]]
# Dumbest debugging area
some_object <- records$static_data.fullrecord_metadata.addresses.address_name[[1]]
# Dumbest debugging area
some_object <- records$static_data.fullrecord_metadata.addresses.address_name[[1]]
fetch_c1 <- function(x) {
print(x)
if(is.data.frame(x)) {
c1 = list()
for(i in c(1:nrow(x))) {
org <- fetch_org_names(x[i,])
authors <- fetch_author_names_for_c1(x[i,])
c1[i] <- paste("[", authors, "] ", org, sep = "")
}
return(paste(c1, collapse = "; "))
} else {
org <- fetch_org_names(x)
authors <- fetch_author_names_for_c1(x)
return(paste("[", authors, "] ", org, sep = ""))
}
}
# Dumbest debugging area
some_object <- records$static_data.fullrecord_metadata.addresses.address_name[[1]]
test_value <- fetch_c1(some_object)
# Dumbest debugging area
some_object <- records$static_data.fullrecord_metadata.addresses.address_name[[2]]
test_value <- fetch_c1(some_object)
# Dumbest debugging area
some_object <- records$static_data.fullrecord_metadata.addresses.address_name[[3]]
test_value <- fetch_c1(some_object)
fetch_c1 <- function(x) {
if(is.data.frame(x)) {
c1 = list()
for(i in c(1:nrow(x))) {
org <- fetch_org_names(x[i,])
authors <- fetch_author_names_for_c1(x[i,])
c1[i] <- paste("[", authors, "] ", org, sep = "")
}
return(paste(c1, collapse = "; "))
} else {
org <- fetch_org_names(x)
authors <- fetch_author_names_for_c1(x)
return(paste("[", authors, "] ", org, sep = ""))
}
}
# Dumbest debugging area
some_object <- records$static_data.fullrecord_metadata.addresses.address_name[[4]]
test_value <- fetch_c1(some_object)
# Dumbest debugging area
some_object <- records$static_data.fullrecord_metadata.addresses.address_name[[5]]
test_value <- fetch_c1(some_object)
# Dumbest debugging area
some_object <- records$static_data.fullrecord_metadata.addresses.address_name[[6]]
test_value <- fetch_c1(some_object)
print(some_object)
print(typeof(some_object))
print(is.data.frame(some_object))
# Dumbest debugging area
some_object <- records$static_data.fullrecord_metadata.addresses.address_name
test_value <- fetch_c1(some_object)
print(some_object)
print(typeof(some_object))
print(is.data.frame(some_object))
View(some_object)
M$C1 <- sapply(records$static_data.fullrecord_metadata.addresses.address_name, fetch_c1)
View(M)
some_object[[5]]
KeywordGrowth(M, sep = ";")
library(bibliometrix)
KeywordGrowth(M, sep = ";")
# Load necessary libraries
library(httr)
library(jsonlite)
# Load the Web of Science Starter API key
source('apikeys.R')
# Define your search query
search_query <- "TS=Bibliometric*"
# Set up the parameters for the API request
params <- list(
'databaseId' = 'WOS',
'count' = 100,
'usrQuery' = search_query,
'firstRecord' = 1
)
# Make the initial GET request to the Web of Science Expanded API
response <- GET(
"https://wos-api.clarivate.com/api/wos",
query = params,
add_headers(`X-ApiKey` = expanded_apikey)
)
# Parse the initial JSON content of the response
initial_content <- content(response, as = "text", encoding = "UTF-8")
initial_json <- fromJSON(initial_content, flatten = TRUE)
records = initial_json$Data$Records$records$REC
# Calculate the number of necessary requests to retrieve all the data
documents_found <- initial_json$QueryResult$RecordsFound
requests_required <- ((documents_found - 1 ) %/% params$count) + 1
# Send subsequent API requests
if (requests_required > 1) {
for (i in 2:requests_required) {
params$firstRecord <- ((i - 1) * 100) + 1
response <- GET(
"https://wos-api.clarivate.com/api/wos",
query = params,
add_headers(`X-ApiKey` = expanded_apikey)
)
subsequent_content <- content(response, as = "text", encoding = "UTF-8")
subsequent_json <- fromJSON(subsequent_content, flatten = TRUE)
records <- merge(records, subsequent_json$Data$Records$records$REC, all = TRUE)
print(paste("Request #", i, " of ", requests_required, sep=""))
}
}
# Load necessary libraries
library(httr)
library(jsonlite)
# Load the Web of Science Starter API key
source('apikeys.R')
# Define your search query
search_query <- "TS=Bibliometric*"
# Set up the parameters for the API request
params <- list(
'databaseId' = 'WOS',
'count' = 100,
'usrQuery' = search_query,
'firstRecord' = 1
)
# Make the initial GET request to the Web of Science Expanded API
response <- GET(
"https://wos-api.clarivate.com/api/wos",
query = params,
add_headers(`X-ApiKey` = expanded_apikey)
)
# Parse the initial JSON content of the response
initial_content <- content(response, as = "text", encoding = "UTF-8")
initial_json <- fromJSON(initial_content, flatten = TRUE)
records = initial_json$Data$Records$records$REC
# Calculate the number of necessary requests to retrieve all the data
documents_found <- initial_json$QueryResult$RecordsFound
requests_required <- ((documents_found - 1 ) %/% params$count) + 1
# Send subsequent API requests
if (requests_required > 1) {
for (i in 2:requests_required) {
params$firstRecord <- ((i - 1) * 100) + 1
response <- GET(
"https://wos-api.clarivate.com/api/wos",
query = params,
add_headers(`X-ApiKey` = expanded_apikey)
)
subsequent_content <- content(response, as = "text", encoding = "UTF-8")
subsequent_json <- fromJSON(subsequent_content, flatten = TRUE)
records <- merge(records, subsequent_json$Data$Records$records$REC, all = TRUE)
print(paste("Request #", i, " of ", requests_required, sep=""))
}
}
library(bibliometrix)
biblioshiny()
