# Load necessary libraries
library(httr)
library(jsonlite)

# Load the Web of Science Starter API key
source('apikeys.R')

# Define your search query
search_query <- "OG=Clarivate"

# Set up the parameters for the API request
params <- list(
  'db' = 'WOS',
  'limit' = 50,
  'q' = URLencode(search_query),
  'page' = 1
)

# Make the initial GET request to the Web of Science Starter API
response <- GET(
  "https://api.clarivate.com/apis/wos-starter/v1/documents",
  query = params,
  add_headers(`X-ApiKey` = starter_apikey)
)

# Parse the initial JSON content of the response
initial_content <- content(response, as = "text", encoding = "UTF-8")
initial_json <- fromJSON(initial_content, flatten = TRUE)
records = initial_json$hits

# Calculate the number of necessary requests to retrieve all the data
documents_found <- initial_json$metadata$total
requests_required <- ((documents_found - 1 ) %/% params$limit) + 1

# Send subsequent API requests
if (requests_required > 1) {
  for (i in 2:requests_required) {
    params$page <- i
    response <- GET(
      "https://api.clarivate.com/apis/wos-starter/v1/documents",
      query = params,
      add_headers(`X-ApiKey` = starter_apikey)
    )
    subsequent_content <- content(response, as = "text", encoding = "UTF-8")
    subsequent_json <- fromJSON(subsequent_content, flatten = TRUE)
    records <- merge(records, subsequent_json$hits, all = TRUE)
    print(paste("Request #", i, " of ", requests_required, sep=""))
  }
}

# View the result as a dataframe
View(records)


# Reformat the dataframe for Bibliometrix
M <- records[, c(1, 2, 6, 7)]
names(M) <- c('UT', 'TI', 'SO', 'PY')
M$DB <- rep('WOS', times = nrow(M))

# Function to convert the UT column values into Bibliometrix format
wos_to_isi <- function(x) {
  return(gsub('WOS:', 'ISI', x))
}

# Function to convert vectors to characters
vector_to_char <- function(x) {
  if(length(x) == 0) {
    return("")
  } else if (is.vector(x)) {
    return(paste(x, collapse = "; "))
  }
}

# Function to retrieve WoS author names from dataframes to chars
fetch_author_names <- function(x) {
  return(paste(x[, 'wosStandard'], collapse = "; "))
}

# Function to retrieve WoS times cited counts
fetch_times_cited <- function(x) {
  row <- x[x$db == 'WOS', ]
  return(row$count)
}


# Apply the functions above to specific columns
M$UT <- sapply(M$UT, wos_to_isi)
M$DT <- sapply(records$types, vector_to_char)
M$AU <- sapply(records$names.authors, fetch_author_names)
M$TC <- sapply(records$citations, fetch_times_cited)
M$DE <- sapply(records$keywords.authorKeywords, vector_to_char)

print(M$DE)
View(M)

library(bibliometrix)

biblioAnalysis(M, sep = "; ")
biblioNetwork(M, analysis = "co-occurrences", network = "author_keywords")
bradford(M)
