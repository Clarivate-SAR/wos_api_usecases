# Load necessary libraries
library(httr)
library(jsonlite)

# Load the Web of Science Starter API key
source('apikeys.R')

# Define your search query
search_query_1 <- "TS=vosviewer"

# Set up the parameters for the API request
params <- list(
  'db' = 'WOS',
  'limit' = 50,
  'q' = URLencode(search_query_1),
  'page' = 1
)

# Make the initial GET request to the Web of Science Starter API
response <- GET(
  "https://api.clarivate.com/apis/wos-starter/v1/documents",
  query = params,
  add_headers(`X-ApiKey` = starter_apikey)
)

# Parse the initial JSON content of the response
initial_content <- content(response, as = "text", encoding = "UTF-8")
initial_json <- fromJSON(initial_content, flatten = TRUE)
records_1 = initial_json$hits

# Calculate the number of necessary requests to retrieve all the data
documents_found <- initial_json$metadata$total
requests_required <- ((documents_found - 1 ) %/% params$limit) + 1

# Send subsequent API requests
if (requests_required > 1) {
  for (i in 2:requests_required) {
    params$page <- i
    response <- GET(
      "https://api.clarivate.com/apis/wos-starter/v1/documents",
      query = params,
      add_headers(`X-ApiKey` = starter_apikey)
    )
    subsequent_content <- content(response, as = "text", encoding = "UTF-8")
    subsequent_json <- fromJSON(subsequent_content, flatten = TRUE)
    records_1 <- merge(records_1, subsequent_json$hits, all = TRUE)
    print(paste("Request #", i, " of ", requests_required, sep=""))
  }
}

# Define your search query 2
search_query_2 <- "TS=citespace"

# Set up the parameters for the API request
params <- list(
  'db' = 'WOS',
  'limit' = 50,
  'q' = URLencode(search_query_2),
  'page' = 1
)

# Make the initial GET request to the Web of Science Starter API
response <- GET(
  "https://api.clarivate.com/apis/wos-starter/v1/documents",
  query = params,
  add_headers(`X-ApiKey` = starter_apikey)
)

# Parse the initial JSON content of the response
initial_content <- content(response, as = "text", encoding = "UTF-8")
initial_json <- fromJSON(initial_content, flatten = TRUE)
records_2 = initial_json$hits

# Calculate the number of necessary requests to retrieve all the data
documents_found <- initial_json$metadata$total
requests_required <- ((documents_found - 1 ) %/% params$limit) + 1

# Send subsequent API requests
if (requests_required > 1) {
  for (i in 2:requests_required) {
    params$page <- i
    response <- GET(
      "https://api.clarivate.com/apis/wos-starter/v1/documents",
      query = params,
      add_headers(`X-ApiKey` = starter_apikey)
    )
    subsequent_content <- content(response, as = "text", encoding = "UTF-8")
    subsequent_json <- fromJSON(subsequent_content, flatten = TRUE)
    records_2 <- merge(records_2, subsequent_json$hits, all = TRUE)
    print(paste("Request #", i, " of ", requests_required, sep=""))
  }
}

# Define your search query
search_query_3 <- "TS=(bibliometrix)"

# Set up the parameters for the API request
params <- list(
  'db' = 'WOS',
  'limit' = 50,
  'q' = URLencode(search_query_3),
  'page' = 1
)

# Make the initial GET request to the Web of Science Starter API
response <- GET(
  "https://api.clarivate.com/apis/wos-starter/v1/documents",
  query = params,
  add_headers(`X-ApiKey` = starter_apikey)
)

# Parse the initial JSON content of the response
initial_content <- content(response, as = "text", encoding = "UTF-8")
initial_json <- fromJSON(initial_content, flatten = TRUE)
records_3 = initial_json$hits

# Calculate the number of necessary requests to retrieve all the data
documents_found <- initial_json$metadata$total
requests_required <- ((documents_found - 1 ) %/% params$limit) + 1

# Send subsequent API requests
if (requests_required > 1) {
  for (i in 2:requests_required) {
    params$page <- i
    response <- GET(
      "https://api.clarivate.com/apis/wos-starter/v1/documents",
      query = params,
      add_headers(`X-ApiKey` = starter_apikey)
    )
    subsequent_content <- content(response, as = "text", encoding = "UTF-8")
    subsequent_json <- fromJSON(subsequent_content, flatten = TRUE)
    records_3 <- merge(records_3, subsequent_json$hits, all = TRUE)
    print(paste("Request #", i, " of ", requests_required, sep=""))
  }
}



# Create vizualisations from the dataframe
pub_years_vos <- table(records_1$source.publishYear)
pub_years_cs <- table(records_2$source.publishYear)
pub_years_bmbs <- table(records_3$source.publishYear)
df <- merge(pub_years_vos, pub_years_cs, by = 1, all = TRUE, )
df <- merge (df, pub_years_bmbs, all = TRUE)
row.names(df) <- final_table$Var1
df <- df[order(row.names(df)), , drop = FALSE]
df$Var1 <- NULL
coul = c("#93FF9E", "#B175E1", "#F0FE4F")
barplot(
  t(as.matrix(df)),
  beside = TRUE,
  main = "Dynamics comparison for the topics",
  col = coul,
  border = "#FFFFFF"
  )

opar = par(oma = c(0,0,0,0), mar = c(0,0,0,0), new = TRUE)

legend("topright",
       legend = c(search_query_1, search_query_2, search_query_3),
       fill = coul
)

par(opar)