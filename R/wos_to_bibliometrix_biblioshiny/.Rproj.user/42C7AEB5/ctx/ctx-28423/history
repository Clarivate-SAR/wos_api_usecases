record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU\t", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI\t", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO\t", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI\t", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT\t", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE\t", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID\t", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "DB\tWOS\n\n", sep = "")
}
writeLines(output, "file1.txt")
biblioshiny()
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "DB WOS\n\n", sep = "")
}
writeLines(output, "file1.txt")
biblioshiny()
View(output)
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "DB WOS\n\n", sep = "")
}
writeLines(output, "file1.txt")
# Load necessary libraries
library(httr)
library(jsonlite)
library(bibliometrix)
# Load the Web of Science Starter API key
source('apikeys.R')
# Define your search query
search_query <- "TS=Bibliometric*"
# Set up the parameters for the API request
params <- list(
'databaseId' = 'WOS',
'count' = 100,
'usrQuery' = search_query,
'firstRecord' = 1
)
# Make the initial GET request to the Web of Science Expanded API
response <- GET(
"https://wos-api.clarivate.com/api/wos",
query = params,
add_headers(`X-ApiKey` = expanded_apikey)
)
# Parse the initial JSON content of the response
initial_content <- content(response, as = "text", encoding = "UTF-8")
initial_json <- fromJSON(initial_content, flatten = FALSE)
# Functions to process the JSON data into a tab-delimited file
fetch_author_names <- function(x) {
if(is.null(nrow(x))) {
return(x$full_name)
} else {
return(paste(x[, "full_name"], collapse = "\n "))
}
}
fetch_doc_title <- function(x) {
row <- x[x$type == 'item', ]
return(row$content)
}
fetch_source_title <- function(x) {
row <- x[x$type == 'source', ]
return(row$content)
}
fetch_source_abbreviation <- function(x) {
if('abbrev_iso' %in% x$type) {
row <- x[x$type == 'abbrev_iso', ]
return(row$content)
} else {
return("")
}
}
fetch_keywords <- function(x) {
return(paste(x, collapse = "; "))
}
output <- ""
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "DB WOS\n\n", sep = "")
}
writeLines(output, "file1.txt")
biblioshiny()
biblioshiny()
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n\n", sep = "")
}
output <- ""
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "TC ", fetch_times_cited(record$dynamic_data$citation_related$tc_list$silo_tc[[1]]))
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n\n", sep = "")
}
fetch_times_cited <- function(x) {
row <- x[x$coll_id == 'WOS', ]
return(row$local_count)
}
output <- ""
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "TC ", fetch_times_cited(record$dynamic_data$citation_related$tc_list$silo_tc[[1]]))
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n\n", sep = "")
}
writeLines(output, "file1.txt")
record <- initial_json$Data$Records$records$REC[12, ]
print(record$UID)
print(gsub('WOS:', 'ISI', record$UID))
output <- ""
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "TC ", fetch_times_cited(record$dynamic_data$citation_related$tc_list$silo_tc[[1]]), "\n", sep = "")
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n\n", sep = "")
}
writeLines(output, "file1.txt")
biblioshiny()
convert2df("file1.txt")
output <- "FN Clarivate Analytics Web of Science\nVR 1.0\n"
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "TC ", fetch_times_cited(record$dynamic_data$citation_related$tc_list$silo_tc[[1]]), "\n", sep = "")
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n\n", sep = "")
}
writeLines(output, "file1.txt")
convert2df("file1.txt")
output <- "FN Clarivate Analytics Web of Science\nVR 1.0\n"
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "TC ", fetch_times_cited(record$dynamic_data$citation_related$tc_list$silo_tc[[1]]), "\n", sep = "")
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n", sep = "")
output <- paste(output, "EF\n\n", sep = "")
}
output <- paste(output, "EF", sep = "")
writeLines(output, "file1.txt")
convert2df("file1.txt")
output <- "FN Clarivate Analytics Web of Science\nVR 1.0\n"
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "TC ", fetch_times_cited(record$dynamic_data$citation_related$tc_list$silo_tc[[1]]), "\n", sep = "")
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n", sep = "")
output <- paste(output, "ER\n\n", sep = "")
}
output <- paste(output, "EF", sep = "")
writeLines(output, "file1.txt")
convert2df("file1.txt")
output <- "FN Clarivate Analytics Web of Science\nVR 1.0\n"
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n   ", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "TC ", fetch_times_cited(record$dynamic_data$citation_related$tc_list$silo_tc[[1]]), "\n", sep = "")
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n", sep = "")
output <- paste(output, "ER\n\n", sep = "")
}
output <- paste(output, "EF", sep = "")
writeLines(output, "file1.txt")
convert2df("file1.txt")
# Functions to process the JSON data into a tab-delimited file
fetch_author_names <- function(x) {
if(is.null(nrow(x))) {
return(x$full_name)
} else {
return(paste(x[, "full_name"], collapse = "\n   "))
}
}
output <- "FN Clarivate Analytics Web of Science\nVR 1.0\n"
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "TC ", fetch_times_cited(record$dynamic_data$citation_related$tc_list$silo_tc[[1]]), "\n", sep = "")
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n", sep = "")
output <- paste(output, "ER\n\n", sep = "")
}
output <- paste(output, "EF", sep = "")
writeLines(output, "file1.txt")
convert2df("file1.txt")
convert2df("file1.txt")
biblioshiny()
biblioshiny()
output <- "FN Clarivate Analytics Web of Science\nVR 1.0\n"
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "AB ", "\n", sep = "")
output <- paste(output, "C1 ", "\n", sep = "")
output <- paste(output, "TC ", fetch_times_cited(record$dynamic_data$citation_related$tc_list$silo_tc[[1]]), "\n", sep = "")
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n", sep = "")
output <- paste(output, "ER\n\n", sep = "")
}
output <- paste(output, "EF", sep = "")
writeLines(output, "file1.txt")
biblioshiny()
output <- "FN Clarivate Analytics Web of Science\nVR 1.0\n"
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "AB ", "\n", sep = "")
output <- paste(output, "C1 ", "\n", sep = "")
output <- paste(output, "RP ", "\n", sep = "")
output <- paste(output, "PY ", "\n", sep = "")
output <- paste(output, "SC ", "\n", sep = "")
output <- paste(output, "TC ", fetch_times_cited(record$dynamic_data$citation_related$tc_list$silo_tc[[1]]), "\n", sep = "")
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n", sep = "")
output <- paste(output, "ER\n\n", sep = "")
}
output <- paste(output, "EF", sep = "")
writeLines(output, "file1.txt")
row <- x[x$coll_id == 'WOS', ]
biblioshiny()
output <- "FN Clarivate Analytics Web of Science\nVR 1.0\n"
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
outpuy <- paste(output, "PT ", "\n", sep = "")
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "AB ", "\n", sep = "")
output <- paste(output, "C1 ", "\n", sep = "")
output <- paste(output, "RP ", "\n", sep = "")
output <- paste(output, "PY ", "\n", sep = "")
output <- paste(output, "SC ", "\n", sep = "")
output <- paste(output, "TC ", fetch_times_cited(record$dynamic_data$citation_related$tc_list$silo_tc[[1]]), "\n", sep = "")
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n", sep = "")
output <- paste(output, "ER\n\n", sep = "")
}
output <- paste(output, "EF", sep = "")
writeLines(output, "file1.txt")
biblioshiny()
output <- "FN Clarivate Analytics Web of Science\nVR 1.0\n"
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
outpuy <- paste(output, "PT ", "\n", sep = "")
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "AB ", "\n", sep = "")
output <- paste(output, "C1 ", "\n", sep = "")
output <- paste(output, "RP ", "\n", sep = "")
output <- paste(output, "PY ", "\n", sep = "")
output <- paste(output, "SC ", "\n", sep = "")
output <- paste(output, "TC ", fetch_times_cited(record$dynamic_data$citation_related$tc_list$silo_tc[[1]]), "\n", sep = "")
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n", sep = "")
output <- paste(output, "ER\n\n", sep = "")
}
output <- paste(output, "EF", sep = "")
writeLines(output, "file1.txt")
writeLines(output, "file1.txt")
biblioshiny()
output <- "FN Clarivate Analytics Web of Science\nVR 1.0\n"
for(i in rownames(initial_json$Data$Records$records$REC)) {
record <- initial_json$Data$Records$records$REC[i, ]
print(record$UID)
output <- paste(output, "PT ", "\n", sep = "")
output <- paste(output, "AU ", fetch_author_names(record$static_data$summary$names$name[[1]]), "\n", sep = "")
output <- paste(output, "TI ", fetch_doc_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "SO ", fetch_source_title(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "JI ", fetch_source_abbreviation(record$static_data$summary$titles$title[[1]]), "\n", sep = "")
output <- paste(output, "DT ", record$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
output <- paste(output, "DE ", fetch_keywords(record$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
output <- paste(output, "ID ", fetch_keywords(record$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
output <- paste(output, "AB ", "\n", sep = "")
output <- paste(output, "C1 ", "\n", sep = "")
output <- paste(output, "RP ", "\n", sep = "")
output <- paste(output, "PY ", "\n", sep = "")
output <- paste(output, "SC ", "\n", sep = "")
output <- paste(output, "TC ", fetch_times_cited(record$dynamic_data$citation_related$tc_list$silo_tc[[1]]), "\n", sep = "")
output <- paste(output, "UT ", gsub('WOS:', 'ISI', record$UID), "\n", sep = "")
output <- paste(output, "DB WOS\n", sep = "")
output <- paste(output, "ER\n\n", sep = "")
}
output <- paste(output, "EF", sep = "")
writeLines(output, "file1.txt")
biblioshiny()
object <- initial_json$Data$Records$records$REC
View(object)
# Load necessary libraries
library(httr)
library(jsonlite)
library(bibliometrix)
# Load the Web of Science Starter API key
source('apikeys.R')
# Define your search query
search_query <- "TS=Bibliometric*"
# Functions to process the JSON data into a tab-delimited file
fetch_author_names <- function(x) {
if(is.null(nrow(x))) {
return(x$full_name)
} else {
return(paste(x[, "full_name"], collapse = "\n   "))
}
}
fetch_doc_title <- function(x) {
row <- x[x$type == 'item', ]
return(row$content)
}
fetch_source_title <- function(x) {
row <- x[x$type == 'source', ]
return(row$content)
}
fetch_source_abbreviation <- function(x) {
if('abbrev_iso' %in% x$type) {
row <- x[x$type == 'abbrev_iso', ]
return(row$content)
} else {
return("")
}
}
fetch_keywords <- function(x) {
return(paste(x, collapse = "; "))
}
fetch_times_cited <- function(x) {
row <- x[x$coll_id == 'WOS', ]
return(row$local_count)
}
general_fetcher <- function(x) {
return_string <= ""
for(i in rownames(x)) {
print(x[i, ]$UID)
return_string <- paste(return_string, "PT ", "\n", sep = "")
return_string <- paste(return_string, "AU ", fetch_author_names(x[i, ]$static_data$summary$names$name[[1]]), "\n", sep = "")
return_string <- paste(return_string, "TI ", fetch_doc_title(x[i, ]$static_data$summary$titles$title[[1]]), "\n", sep = "")
return_string <- paste(return_string, "SO ", fetch_source_title(x[i, ]$static_data$summary$titles$title[[1]]), "\n", sep = "")
return_string <- paste(return_string, "JI ", fetch_source_abbreviation(x[i, ]$static_data$summary$titles$title[[1]]), "\n", sep = "")
return_string <- paste(return_string, "DT ", x[i, ]$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
return_string <- paste(return_string, "DE ", fetch_keywords(x[i, ]$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
return_string <- paste(return_string, "ID ", fetch_keywords(x[i, ]$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
return_string <- paste(return_string, "AB ", "\n", sep = "")
return_string <- paste(return_string, "C1 ", "\n", sep = "")
return_string <- paste(return_string, "RP ", "\n", sep = "")
return_string <- paste(return_string, "PY ", x[i, ]$static_data$summary$pub_info$pubyear[[1]], "\n", sep = "")
return_string <- paste(return_string, "SC ", "\n", sep = "")
return_string <- paste(return_string, "TC ", fetch_times_cited(x[i, ]$dynamic_data$citation_related$tc_list$silo_tc[[1]]), "\n", sep = "")
return_string <- paste(return_string, "UT ", x[i, ]$UID, "\n", sep = "")
return_string <- paste(return_string, "ER\n\n", sep = "")
}
return(return_string)
}
# Set up the parameters for the API request
params <- list(
'databaseId' = 'WOS',
'count' = 100,
'usrQuery' = search_query,
'firstRecord' = 1
)
# Make the initial GET request to the Web of Science Expanded API
response <- GET(
"https://wos-api.clarivate.com/api/wos",
query = params,
add_headers(`X-ApiKey` = expanded_apikey)
)
# Parse the initial JSON content of the response
initial_content <- content(response, as = "text", encoding = "UTF-8")
initial_json <- fromJSON(initial_content, flatten = FALSE)
output <- "FN Clarivate Analytics Web of Science\nVR 1.0\n"
output <- paste(output, general_fetcher(initial_json$Data$Records$records$REC), sep = "")
general_fetcher <- function(x) {
return_string <- ""
for(i in rownames(x)) {
print(x[i, ]$UID)
return_string <- paste(return_string, "PT ", "\n", sep = "")
return_string <- paste(return_string, "AU ", fetch_author_names(x[i, ]$static_data$summary$names$name[[1]]), "\n", sep = "")
return_string <- paste(return_string, "TI ", fetch_doc_title(x[i, ]$static_data$summary$titles$title[[1]]), "\n", sep = "")
return_string <- paste(return_string, "SO ", fetch_source_title(x[i, ]$static_data$summary$titles$title[[1]]), "\n", sep = "")
return_string <- paste(return_string, "JI ", fetch_source_abbreviation(x[i, ]$static_data$summary$titles$title[[1]]), "\n", sep = "")
return_string <- paste(return_string, "DT ", x[i, ]$static_data$summary$doctypes$doctype[[1]], "\n", sep = "")
return_string <- paste(return_string, "DE ", fetch_keywords(x[i, ]$static_data$fullrecord_metadata$keywords$keyword[[1]]), "\n", sep = "")
return_string <- paste(return_string, "ID ", fetch_keywords(x[i, ]$static_data$item$keywords_plus$keyword[[1]]), "\n", sep = "")
return_string <- paste(return_string, "AB ", "\n", sep = "")
return_string <- paste(return_string, "C1 ", "\n", sep = "")
return_string <- paste(return_string, "RP ", "\n", sep = "")
return_string <- paste(return_string, "PY ", x[i, ]$static_data$summary$pub_info$pubyear[[1]], "\n", sep = "")
return_string <- paste(return_string, "SC ", "\n", sep = "")
return_string <- paste(return_string, "TC ", fetch_times_cited(x[i, ]$dynamic_data$citation_related$tc_list$silo_tc[[1]]), "\n", sep = "")
return_string <- paste(return_string, "UT ", x[i, ]$UID, "\n", sep = "")
return_string <- paste(return_string, "ER\n\n", sep = "")
}
return(return_string)
}
output <- paste(output, general_fetcher(initial_json$Data$Records$records$REC), sep = "")
output <- paste(output, "EF", sep = "")
writeLines(output, "file1.txt")
biblioshiny()
